from telegram import ReplyKeyboardMarkup, MenuButtonCommands, BotCommand
from telegram.ext import ContextTypes
from telegram import Update
import logging

logger = logging.getLogger(__name__)


class BotHandlers:
    """
    –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞.

    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    - –û–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ (/start, /help, /newcat)
    - –û–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
    - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π

    Attributes:
        animal_api (AnimalAPI): –≠–∫–∑–µ–º–ø–ª—è—Ä API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏
    """

    def __init__(self, animal_api):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞.

        Args:
            animal_api: –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∂–∏–≤–æ—Ç–Ω—ã—Ö
        """
        self.animal_api = animal_api
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω BotHandlers")

    def get_main_menu(self) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

        Returns:
            ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
            - üê± –§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞
            - üïí –ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?
            - üåê –ú–æ–π IP
            - üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        """
        return ReplyKeyboardMarkup(
            [
                ["üê± –§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞", "üïí –ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?"],
                ["üåê –ú–æ–π IP", "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"],
            ],
            resize_keyboard=True,
        )

    def get_cat_menu(self) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –∫–æ—Ç–∏–∫–æ–≤.

        Returns:
            ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
            - üê± –ù–æ–≤—ã–π –∫–æ—Ç–∏–∫
            - üîô –ù–∞–∑–∞–¥
        """
        return ReplyKeyboardMarkup(
            [["üê± –ù–æ–≤—ã–π –∫–æ—Ç–∏–∫", "üîô –ù–∞–∑–∞–¥"]], resize_keyboard=True
        )

    async def setup_bot_commands(self, app) -> None:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ Telegram.

        Args:
            app: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –±–æ—Ç–∞

        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã:
        - /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
        - /help - –ü–æ–º–æ—â—å
        - /newcat - –ù–æ–≤—ã–π –∫–æ—Ç–∏–∫
        """
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("help", "–ü–æ–º–æ—â—å"),
            BotCommand("newcat", "–ù–æ–≤—ã–π –∫–æ—Ç–∏–∫"),
        ]
        await app.bot.set_my_commands(commands)
        await app.bot.set_chat_menu_button(menu_button=MenuButtonCommands())

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.

        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            chat = update.effective_chat
            name = update.message.chat.first_name
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç {name} (ID: {chat.id})")

            await context.bot.send_message(
                chat_id=chat.id,
                text=f"–ü—Ä–∏–≤–µ—Ç, {name}! –Ø KittyBot üò∫\n\n"
                "–Ø —É–º–µ—é:\n"
                "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ç–∏–∫–æ–≤ üê±\n"
                "‚Ä¢ –®—É—Ç–∏—Ç—å –ø—Ä–æ –≤—Ä–µ–º—è ‚è∞\n"
                '‚Ä¢ –ò –¥–∞–∂–µ "–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å" IP üåê',
                reply_markup=self.get_main_menu(),
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}", exc_info=True)
            raise

    async def help_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.

        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        help_text = (
            "üê± <b>KittyBot Help</b> üê±\n\n"
            "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "‚Ä¢ /newcat - –ù–æ–≤—ã–π –∫–æ—Ç–∏–∫\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
        )
        await update.message.reply_text(help_text, parse_mode="HTML")

    async def send_random_animal(
        self, chat_id: int, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ (–∫–æ—Ç–∏–∫–∞ –∏–ª–∏ —Å–æ–±–∞–∫–∏).

        Args:
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏:
        - –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        - –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
        """
        try:
            logger.info(f"–ó–∞–ø—Ä–æ—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            image_url, caption = await self.animal_api.get_animal_image()

            if image_url:
                try:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=image_url,
                        caption=caption,
                        reply_markup=self.get_cat_menu(),
                    )
                    logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}: {e}")
                    await context.bot.send_message(
                        chat_id=chat_id,
                        text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üòø –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
                        reply_markup=self.get_main_menu(),
                    )
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
                await context.bot.send_message(
                    chat_id=chat_id, text=caption, reply_markup=self.get_main_menu()
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ send_random_animal: {e}", exc_info=True)
            raise

    async def handle_message(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
        - –ó–∞–ø—Ä–æ—Å—ã –∫–æ—Ç–∏–∫–æ–≤ (–ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ –∫–Ω–æ–ø–∫–µ)
        - –ó–∞–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–∏
        - –ó–∞–ø—Ä–æ—Å—ã IP
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞
        - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        """
        text = update.message.text
        chat = update.effective_chat

        if "–∫–æ—Ç–∏–∫" in text.lower() or text == "üê± –§–æ—Ç–æ –∫–æ—Ç–∏–∫–∞":
            await self.send_random_animal(chat.id, context)
        elif text == "üïí –ö–æ—Ç–æ—Ä—ã–π —á–∞—Å?":
            await context.bot.send_message(
                chat_id=chat.id,
                text="‚åö –°–µ–π—á–∞—Å —Ç–æ—á–Ω–æ –∫–æ—à–∞—á—å–µ –≤—Ä–µ–º—è! –ú—è—É!",
                reply_markup=self.get_main_menu(),
            )
        elif text == "üåê –ú–æ–π IP":
            await context.bot.send_message(
                chat_id=chat.id,
                text="üåç –í–∞—à IP: 127.0.0.1 (–ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—Ç–∏–∫–∞)",
                reply_markup=self.get_main_menu(),
            )
        elif text == "üé≤ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ":
            await context.bot.send_message(
                chat_id=chat.id,
                text=f"üé≤ –í–∞—à–µ —á–∏—Å–ª–æ: {hash(text) % 100}",
                reply_markup=self.get_main_menu(),
            )
        elif text == "üîô –ù–∞–∑–∞–¥":
            await context.bot.send_message(
                chat_id=chat.id,
                text="–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                reply_markup=self.get_main_menu(),
            )

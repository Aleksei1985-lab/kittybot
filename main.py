"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞.

–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
from dotenv import load_dotenv
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from animal_api import AnimalAPI
from bot_handlers import BotHandlers
from logging_config import setup_logging
import logging

logger = logging.getLogger(__name__)


async def post_init(application):
    """
    –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    Args:
        application (Application): –≠–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    """
    try:
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")
        await handlers.setup_bot_commands(application)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ post_init: {e}", exc_info=True)
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞."""
    try:
        setup_logging()
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")

        token = os.getenv("API_TELEGRAM_KITTY")
        if not token:
            logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞")
        animal_api = AnimalAPI()
        global handlers
        handlers = BotHandlers(animal_api)

        application = Application.builder().token(token).post_init(post_init).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", handlers.start))
        application.add_handler(CommandHandler("help", handlers.help_command))
        application.add_handler(CommandHandler("newcat", handlers.send_random_animal))
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_message)
        )

        logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ú—è—É! üò∫")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    load_dotenv()
    main()
